==> Install git:
$ sudo apt-get install git
$ git --version


==>  After installing git, the first thing to do:
git config --global user.name "Deepak Kumar Singh"
git config --global user.email "ks.deepak07@gmail.com"


==> To see the user.name or user.email:
$ git config user.name
$ git config user.email

==> To push local branches to the remote branches that already exist with the same name
$ git config --global push.default matching






*************************************************
       INITITIALIZE A NEW GIT REPO
*************************************************

==> To make a folder a git repo, go to that folder and:
git init
git add -A .
git commit -m "first commit"
git remote add origin git@github.com:deepak41/repo-name.git
git push -u origin master


==> To download a online git repo:
$ git clone https://deepak5@bitbucket.org/thethingscloud/machine-learning.git


*********************************
*********************************

==> To see the list of remote repo
$ git remote -v


==> To add a remote repo for the local repo:
$ git remote add <name> <url>


==> To remove a remote repo (e.g. origin) for the local repo:
$ git remote rm origin



************************************
		COMMIT
************************************

==> After making changes in the local repo, to save changes:
$ git status
$ git add -A .         // -A stands for all i.e created, deleted & modified
$ git commit -m "some message"


==> To delete last commit:
$ git reset --hard HEAD~1


==> Force push after deleting a commit:
git push origin -f



SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
			GIT-IGNORE
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

First commit any outstanding code changes.

Then:
git rm -r --cached .
git add .
git commit -m ".gitignore is now working"


***************************************************************
**************************************************************

+++++  BRANCH  ++++++


==> To see the list of branches in local repo:
$ git branch


==> To create a new local branch(named messi) from the current branch:
$ git branch messi
$ git checkout -b messi        // this command creates and switches to new branch


==> To delete a local branch(messi):
$ git branch -D messi


==> To delete a remote(figo) branch(messi):
$ git push figo --delete messi
OR
$ git push figo :messi


==> To switch to a branch(branch1):
$ git checkout branch1


==> To PULL(DOWNLOAD) a new remote branch(branch1):
$ git fetch && git checkout branch1


****************************
*****************************

==> To merge a branch(branch1) to another branch(branch2), first switch to branch2 and:
$ git merge branch1


****************************
*******************************

==> To upload changes to remote repo(named figo):
$ git push figo             (pushes the current local branch to the remote branch with the same name)
$ git push figo branch1       (pushes 'branch1' branch to the remote 'branch1' branch)
$ git push                  (same as "git push origin", origin is remote repo name)


******************************
********************************

==> To see the list of remote tracking branches:
$ git branch -r

==> To fetch from remote repo(figo) to update remote tracking branches:
$ git fetch figo

==> To merge a branch(messi) into another branch(proton), first switch to proton and:
$ git merge messi



************************************
*********************************

==> To merge the remote branch branch1 into the current local branch:
$ git pull origin branch1     (pull = fetch + merge)


************************************
		STASH
************************************

==> To get the list of stash:
$ git stash list

==> To CREATE a stash:
$ git stash

==> To CREATE a stash with a name:
$ git stash push -m 'stash_name'


==> To APPLY a stash (this DELETES the stash from stack):
$ git stash pop


==> To APPLY a stash WITHOUT DELETING it:
$ git stash apply stash@{n}


==> To DELETE a stash:
$ git stash drop stash@{n}

==> To stash a single file:
$ git stash push -m stash_name app/views/cart/welcome.html

******************************************
******************************************




************************************
		CHERRY PICK
************************************


to do
$ git cherry-pick a6ce27d   //commit-id



******************************************
******************************************


# Rules when working:

==> Always cut branch from staging
$ git checkout -b branch_name

==> work on your branch. periodically merge origin staging
$ git fetch
$ git merge origin/staging

if any conflicts, resolve it
always merge staging 2-3 days




************************************
          SSH Keys
************************************
==> To create ssh keys and add it in GitHub:

# Login into laptop or AWS server and:  
$ cd ~/.ssh

# To create ssh keys:
$ ssh-keygen		// it will ask filename, passphrase, etc., just press enter multiple times
OR
$ ssh-keygen -t rsa -b 4096 -C "ks.deepak07@gmail.com"

# Copy the public SSH key:
$ cat id_rsa.pub
Copy the output.

# Go to github settings:
https://github.com/settings/keys

# Click 'New SSH key' and paste the contents of id_rsa.pub.
******************************************************************************
